{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/dkodagoda/Desktop/test-project-login/src/context/AuthContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from \"react\";\nimport { auth } from \"../components/firebase\";\nimport { useRouter } from \"next/router\"; // Types -->\n\n// Auth Context Default values -->\nvar authContextDefaultValues = {\n  user: false,\n  login: function login() {},\n  logout: function logout() {}\n}; // Auth Context -->\n\nvar AuthContext = /*#__PURE__*/createContext(authContextDefaultValues); // Auth hook -->\n\nexport function useAuth() {\n  _s();\n\n  return useContext(AuthContext);\n} // Auth Provider -->\n\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function AuthProvider(_ref) {\n  _s2();\n\n  var children = _ref.children;\n\n  var _useState = useState(false),\n      user = _useState[0],\n      setUser = _useState[1];\n\n  var router = useRouter();\n\n  var login = function login(email, password) {\n    console.log(\"email,password: =-->\", email, password);\n    auth.signInWithEmailAndPassword(email, password).then(function (data) {\n      console.log(user);\n      router.push(\"/\");\n    })[\"catch\"](function (err) {\n      console.log(err);\n    });\n  };\n\n  var logout = function logout() {\n    setUser(false);\n  };\n\n  var value = {\n    user: user,\n    login: login,\n    logout: logout\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n      value: value,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s2(AuthProvider, \"2c+/XksASRm0bavAgh3Omjxe40o=\", false, function () {\n  return [useRouter];\n});\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/Users/dkodagoda/Desktop/test-project-login/src/context/AuthContext.tsx"],"names":["createContext","useContext","useState","auth","useRouter","authContextDefaultValues","user","login","logout","AuthContext","useAuth","AuthProvider","children","setUser","router","email","password","console","log","signInWithEmailAndPassword","then","data","push","err","value"],"mappings":";;;;;;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAA+CC,QAA/C,QAA+D,OAA/D;AACA,SAASC,IAAT,QAAqB,wBAArB;AACA,SAASC,SAAT,QAA0B,aAA1B,C,CAEA;;AAWA;AACA,IAAMC,wBAAsC,GAAG;AAC7CC,EAAAA,IAAI,EAAE,KADuC;AAE7CC,EAAAA,KAAK,EAAE,iBAAM,CAAE,CAF8B;AAG7CC,EAAAA,MAAM,EAAE,kBAAM,CAAE;AAH6B,CAA/C,C,CAMA;;AACA,IAAMC,WAAW,gBAAGT,aAAa,CAAeK,wBAAf,CAAjC,C,CAEA;;AACA,OAAO,SAASK,OAAT,GAAmB;AAAA;;AACxB,SAAOT,UAAU,CAACQ,WAAD,CAAjB;AACD,C,CAED;;GAJgBC,O;;AAKhB,OAAO,SAASC,YAAT,OAA4C;AAAA;;AAAA,MAApBC,QAAoB,QAApBA,QAAoB;;AAAA,kBACzBV,QAAQ,CAAU,KAAV,CADiB;AAAA,MAC1CI,IAD0C;AAAA,MACpCO,OADoC;;AAEjD,MAAMC,MAAM,GAAGV,SAAS,EAAxB;;AAEA,MAAMG,KAAK,GAAG,SAARA,KAAQ,CAACQ,KAAD,EAAgBC,QAAhB,EAAqC;AACjDC,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCH,KAApC,EAA2CC,QAA3C;AACAb,IAAAA,IAAI,CACDgB,0BADH,CAC8BJ,KAD9B,EACqCC,QADrC,EAEGI,IAFH,CAEQ,UAACC,IAAD,EAAe;AACnBJ,MAAAA,OAAO,CAACC,GAAR,CAAYZ,IAAZ;AACAQ,MAAAA,MAAM,CAACQ,IAAP,CAAY,GAAZ;AACD,KALH,WAMS,UAACC,GAAD,EAAc;AACnBN,MAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ;AACD,KARH;AASD,GAXD;;AAaA,MAAMf,MAAM,GAAG,SAATA,MAAS,GAAM;AACnBK,IAAAA,OAAO,CAAC,KAAD,CAAP;AACD,GAFD;;AAIA,MAAMW,KAAK,GAAG;AACZlB,IAAAA,IAAI,EAAJA,IADY;AAEZC,IAAAA,KAAK,EAALA,KAFY;AAGZC,IAAAA,MAAM,EAANA;AAHY,GAAd;AAMA,sBACE;AAAA,2BACE,QAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAEgB,KAA7B;AAAA,gBAAqCZ;AAArC;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAKD;;IAhCeD,Y;UAECP,S;;;KAFDO,Y","sourcesContent":["import { createContext, useContext, ReactNode, useState } from \"react\";\nimport { auth } from \"../components/firebase\";\nimport { useRouter } from \"next/router\";\n\n// Types -->\ntype TAuthContext = {\n  user: boolean;\n  login: (email: string, password: string) => void;\n  logout: (email: string, password: string) => void;\n};\n\ntype TProps = {\n  children: ReactNode;\n};\n\n// Auth Context Default values -->\nconst authContextDefaultValues: TAuthContext = {\n  user: false,\n  login: () => {},\n  logout: () => {},\n};\n\n// Auth Context -->\nconst AuthContext = createContext<TAuthContext>(authContextDefaultValues);\n\n// Auth hook -->\nexport function useAuth() {\n  return useContext(AuthContext);\n}\n\n// Auth Provider -->\nexport function AuthProvider({ children }: TProps) {\n  const [user, setUser] = useState<boolean>(false);\n  const router = useRouter();\n\n  const login = (email: string, password: string) => {\n    console.log(\"email,password: =-->\", email, password);\n    auth\n      .signInWithEmailAndPassword(email, password)\n      .then((data: any) => {\n        console.log(user);\n        router.push(\"/\");\n      })\n      .catch((err: any) => {\n        console.log(err);\n      });\n  };\n\n  const logout = () => {\n    setUser(false);\n  };\n\n  const value = {\n    user,\n    login,\n    logout,\n  };\n\n  return (\n    <>\n      <AuthContext.Provider value={value}>{children}</AuthContext.Provider>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}